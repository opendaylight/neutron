//
// Copyright (c) 2012-2014 by Brocade Communications Systems, Inc. All Rights Reserved.
//
// This software is licensed, and not freely redistributable. See the
// license agreement for details.
//
module neutron-networks {

    yang-version 1;

    namespace "urn:opendaylight:neutron-networks";

    prefix neutron-networks;

    import ietf-yang-types { prefix "yang"; }
    // It requires rfc6991 (revision 2013-07-15), but odl don't have it, so this patch verify build will fail.
    import ietf-inet-types { prefix "inet"; revision-date 2010-09-24; }
    import neutron-attrs { prefix "attrs"; }
    import neutron-provider { prefix "provider"; }
    import neutron-L3 { prefix "L3"; }

    organization "OpenDaylight Neutron Group";

    contact "J. Gregory Hall <ghall@brocade.com>";

    description "This YANG module defines Openstack Ice House Neutron Network model";

    revision "2014-10-02" {
        description
                "Initial version of Openstack Neutron Ice House Network model.";
    }

    grouping network-attrs {

        leaf-list subnets {
            description "The associated subnets.";
            type attrs:uuid;
        }

        leaf shared {
            type boolean;
            default "false";
            description "Indicates whether this network or subnet is shared across all
                        tenants. By default, only administrative users can change this
                        value.";
        }

        uses L3:L3-attrs;

        list providers {
            description "TODO: missing openstack/neutron documentation on this one.";
            key segmentation-id;
            uses provider:provider-attrs;
        }
        uses provider:provider-attrs;
    }

    container networks {
        list network {

            description "A network is a virtual isolated layer-2 broadcast domain which
                        is typically reserved to the tenant who created it, unless the
                        network has been explicitly configured to be shared. Tenants can
                        create multiple networks, until they reach the thresholds specified
                        by per-tenant Quotas. The network is the principal entity for 
                        the Neutron API. Ports and Subnets must always be associated 
                        with a network.";

            key "uuid";
            uses attrs:base-attrs;
            uses attrs:admin-attrs;
            uses network-attrs;
        }
    }
}
