{
  "comments": [
    {
      "key": {
        "uuid": "75e4ee37_e48bd9df",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-09T18:50:21Z",
      "side": 1,
      "message": "What if no qos rule is supported?\nIn that case, how we distinguish the case that feature isn\u0027t supported yet from the case that no qos rule is supported.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7504f3ae_a6a6fc2f",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-10T06:53:30Z",
      "side": 1,
      "message": "\"In that case, how we distinguish the case that feature isn\u0027t supported yet from the case that no qos rule is supported.\"\n\nWhat is the difference between \"feature isn\u0027t supported yet\" and \"no qos rule is supported\"? Either ODL knows how to configure a certain type of qos rule or it doesn\u0027t, no?",
      "parentUuid": "75e4ee37_e48bd9df",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98f9ffcb_496aea91",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-10T14:55:36Z",
      "side": 1,
      "message": "I mean the compatibility of ODL versions.\nnetworking-odl needs to handle the multiple versions of ODL.\nnitrogen, oxygen, fluorine.\n\nnetworking-odl should be able to handle them reasonablely.y",
      "parentUuid": "7504f3ae_a6a6fc2f",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce9a72a_7d595dee",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-11T06:20:10Z",
      "side": 1,
      "message": "Yes. These are just constants. At the point where netvirt will support any of these features they will be written to the md-sal and not before that. That\u0027s how feature negotiation was designed to work, no?",
      "parentUuid": "98f9ffcb_496aea91",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42aab9fb_b2dce835",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-12T18:09:51Z",
      "side": 1,
      "message": "How do you(networking-odl) distinguish the following case?\n- nitrogen, oxygen: there is features supported. but no constants for qos rule constant is defined. networking-odl needs to fallback to reasonable default.\n- fluorine: constants for qos rules are defined.\n-- case a: backend like netvirt knows qos rules. it populates supported qos rules. networking-odl retrieve support qos rules.\n-- case b: backend like netvirt knows qos rules. But it doesn\u0027t support any qos rules. so it doesn\u0027t populate qny qos rules. networking-odl should know it and reject all qos rules from openstack user.\n-- case c: backend like netvirt doesn\u0027t know qos rules. so qos rules aren\u0027t populated in features. networking-odl should fallback to reasonable default.",
      "parentUuid": "dce9a72a_7d595dee",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "528b637c_6ca25108",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-15T10:16:30Z",
      "side": 1,
      "message": "I don\u0027t understand the difference you make between \"knowing qos rules\" and \"supporting qos rules.\" Could you please explain more what this means? I find this hard to understand because in my mind a specific qos rule is either supported or not, no? You seem to have three states: (1) not known and not supported, (2) known and not supported, (3) known and supported.\n\nIn general, WRT nitrogen and oxygen where (if I understand you correctly) the qos features are supported by the netvirt code but not declared as features in the operational md-sal, I would say that the correct solution could be for the operator to define the features manually in the ml2 config. n-odl checks the config first and only queries odl if the config value is not present. So, if a deployment has a newer",
      "parentUuid": "42aab9fb_b2dce835",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 82,
        "endChar": 5
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b943caef_282f1256",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-09T16:25:07Z",
      "side": 1,
      "message": "Now openstack neutron defines three rules. MIN_BANDWIDTH_RULES.\nSo let\u0027s add MIN_BANDWIDTH_RULES too.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2490e8a5_e4f4f385",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-09T18:50:21Z",
      "side": 1,
      "message": "Why do we want feature per qos rule?\nFor example, we can have\nsupported-qos-rules identity and all related values as paramater.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc03cd88_90adf140",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-10T06:53:30Z",
      "side": 1,
      "message": "done",
      "parentUuid": "b943caef_282f1256",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "905b0cdb_5bfc5d9b",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-10T06:53:30Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s necessary to change the model for this. Currently the model supports a flat list of features. How many different qos rule types will there be? Is it really a problem to have them all?",
      "parentUuid": "2490e8a5_e4f4f385",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2e43e67_4badfa89",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-10T14:55:36Z",
      "side": 1,
      "message": "The support qos rule is open.\nIn future, more qos rule would come. and acctually min bandwidth is added later. and more would come in future.\nIn that case, we don\u0027t want to keep adding new rules.",
      "parentUuid": "905b0cdb_5bfc5d9b",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5eb7c49d_d77ca3ce",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-11T06:20:10Z",
      "side": 1,
      "message": "I still do not understand your thinking here. What is wrong with adding a feature for each rule type as they come along? I *greatly* prefer keeping the data model simple (list of identities) to complicating the model.",
      "parentUuid": "b2e43e67_4badfa89",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8e1dbec_eed98fc8",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 3316
      },
      "writtenOn": "2018-04-12T18:09:51Z",
      "side": 1,
      "message": "ODL neutron northbound shouldn\u0027t be a blocker for ODL backend like netvirt to support new qos rules.\n\nLet\u0027s suppose new qos rule is added at openstack neutron api.\nand the backend wants to support it.\nWith your proposal, we need to add new identity.\nAlso what if they backport new qos rule support to older version? e.g. Neon -\u003e Fluorine\nIt\u0027s undesirable for the backend implementer to update ODL neutron yang model.\n\n\n\nMy proposal is as follows.\n\nidentity supported-qos-rules {\n   ...\n}\nonly this identity. no identity qos rules.\nand then as configuration string, it should include json string, something like\n\n{\n    qos_consts.RULE_TYPE_BANDWIDTH_LIMIT: {\n        qos_consts.MAX_KBPS: {\n            \u0027type:range\u0027: [0, db_consts.DB_INTEGER_MAX_VALUE]},\n        qos_consts.MAX_BURST: {\n            \u0027type:range\u0027: [0, db_consts.DB_INTEGER_MAX_VALUE]},\n        qos_consts.DIRECTION: {\n            \u0027type:values\u0027: constants.VALID_DIRECTIONS}\n    },\n    qos_consts.RULE_TYPE_DSCP_MARKING: {\n        qos_consts.DSCP_MARK: {\u0027type:values\u0027: constants.VALID_DSCP_MARKS}\n    }\n}\n(this is copied from openstack neutron code. constants need to be expanded to actual string value. But you get the idea)\nthen the configuration value will be simply supported_rule in networking-odl\n\nWith this, several issues are solved as follows.\n\n- the lack of supported-qos-rules -\u003e networking-odl falls back to default\n- the presence of support-qos-rules: the backend knows it. the actual supported rules can be empty list.\n- also this is agnostic to actual qos rules. so in future no update is needed for the backend to support new qos rules.\n- configuration string will be directly supported_rules in networking-odl.\n\nMaybe we\u0027d like to write a documentation on those configuration values, what to be populated for the backend developers.",
      "parentUuid": "5eb7c49d_d77ca3ce",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80770934_9a4fc572",
        "filename": "model/src/main/yang/neutron-extensions.yang",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5357
      },
      "writtenOn": "2018-04-15T10:16:30Z",
      "side": 1,
      "message": "At what rate do you expect these rule types will be added and how many will there be? I don\u0027t see this as much of a block especially because of the ability to hard code features in the ml2 config. \n\nMy main issue with your proposal is that, as far as I can tell, qos rules are just another set of features and I don\u0027t like there being multiple feature negotiation mechanisms.",
      "parentUuid": "b8e1dbec_eed98fc8",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 84,
        "endChar": 1
      },
      "revId": "3e67fdcaba431e9fd9a82c88bd97d2e8ac7fb897",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}