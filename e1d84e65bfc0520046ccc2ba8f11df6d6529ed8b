{
  "comments": [
    {
      "key": {
        "uuid": "55ec7b9f_241b32a7",
        "filename": "northbound-api/src/main/java/org/opendaylight/neutron/northbound/api/WebInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-04-04T16:02:00Z",
      "side": 1,
      "message": "I wonder if it makes sense to hide the com.sun.jersey... class via a new ServletDetailsBuilder method that passes the javax.ws.rs.core.Application instance:\n\n  ServletDetailsBuilder application(Application application);",
      "revId": "e1d84e65bfc0520046ccc2ba8f11df6d6529ed8b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e7230b_5a03e233",
        "filename": "northbound-api/src/main/java/org/opendaylight/neutron/northbound/api/WebInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-04-04T18:30:44Z",
      "side": 1,
      "message": "as in baked into the web-api?  That would seem wrong from a \"modularity\" PoV, to me... why would the generic web-api have a dependency to and know about that particular Web Framework (javax.ws.rs), but not the trillion other ones out there? No harm to just have to .servlet(new ServletContainer(new XyzApplication()) instead of your .application(new XyzApplication()), no?  Hoping to get your +1 on this! ;)",
      "parentUuid": "55ec7b9f_241b32a7",
      "revId": "e1d84e65bfc0520046ccc2ba8f11df6d6529ed8b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2acb38fc_e80faaa7",
        "filename": "northbound-api/src/main/java/org/opendaylight/neutron/northbound/api/WebInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-04-04T18:47:26Z",
      "side": 1,
      "message": "\u003e as in baked into the web-api?  That would seem wrong from a\n \u003e \"modularity\" PoV, to me... why would the generic web-api have a\n \u003e dependency to and know about that particular Web Framework\n \u003e (javax.ws.rs), but not the trillion other ones out there? \n\nI\u0027m not familiar with the other (trillion -1) ones out there. Admittedly I\u0027m a bit ignorant of Web Frameworks but I figured javax.ws.rs was a pretty standard API, like javax.servlet which our web-api does depend on. \n\n\u003e No harm\n \u003e to just have to .servlet(new ServletContainer(new XyzApplication())\n \u003e instead of your .application(new XyzApplication()), no?  \n\nI was considering the problems we\u0027ve had with jersey versions and if we ever want to get rid of jersey (although I don\u0027t know of alternatives). My thought was to provide a \"default\" servlet impl based on a javax.ws.rs.core.Application where we could easily change such impl in one place so other projects don\u0027t have to depend on com.sun.jersey. All the web projects I\u0027ve seen do the same thing creating a ServletContainer. Doesn\u0027t seem like an evil ideal to me but if there\u0027s really no issue with using jersey then that\u0027s fine.\n\n\u003e Hoping to get your +1 on this! ;)\n\nI\u0027m not -1 - just a thought...",
      "parentUuid": "b4e7230b_5a03e233",
      "revId": "e1d84e65bfc0520046ccc2ba8f11df6d6529ed8b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b71cab6_587eaa15",
        "filename": "northbound-api/src/main/java/org/opendaylight/neutron/northbound/api/WebInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-04-05T04:06:02Z",
      "side": 1,
      "message": "\u003e javax.ws.rs was a pretty standard API,\n\u003e like javax.servlet which our web-api does depend on. \n\njust because they are both in the javax.* namespace?  That just means someone went through the JSR, instead of innovating outside it, like Spring, Vaadin, or whatever else. \n\nBut JAX RS is still a completely separate API from the base Servlet API (which is the common denominator that all other web frameworks build upon); therefore I still don\u0027t think this minor syntactic sugar short cut adds any real value, and only \"pollutes\" the simple base web API.  \n\nIt\u0027s a very minor point in this overall change - is it OK with you otherwise?",
      "parentUuid": "2acb38fc_e80faaa7",
      "revId": "e1d84e65bfc0520046ccc2ba8f11df6d6529ed8b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21bee294_415579d9",
        "filename": "northbound-api/src/main/java/org/opendaylight/neutron/northbound/api/WebInitializer.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-04-05T06:35:13Z",
      "side": 1,
      "message": "I\u0027m not referring to this patch in particular and not -1 it. Let\u0027s put aside philosophy of web APIs for a moment and consider practicality. Every web app in ODL I\u0027ve seen uses  JAXRS and registers an Application instance via com.sun.jersey. Even putting aside the risks of using anything in the com.sun space, I\u0027ve heard concerns/issues from several folks about using jersey and I\u0027ve battled issues myself wrt the jersey version we\u0027re using and the dependencies it requires. I\u0027m only proposing to make things easier should we choose to move away from jersey. Maybe I\u0027ve misunderstood the whole jersey thing and am off base here but can you please speak to that instead of web framework philosophies and \"purity\" of our web API? In the end all that really matters is what\u0027s best for ODL and if every app is going to basically do the same thing then why not add a little sugar to centralize it. (we\u0027re not trying to build a super generic API for the whole world to consume).",
      "parentUuid": "1b71cab6_587eaa15",
      "revId": "e1d84e65bfc0520046ccc2ba8f11df6d6529ed8b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}